

===
File: blocks/create-custom-components.mdx

---
title: Creating custom components
description: Create custom block templates to add your own UI elements into workflows.
---

import { Banner } from "../../components/banner";

# Creating custom components

Create custom [block templates](/blocks/templates) to add your own UI elements into [workflows](/workflows).

[TODO: Image]

## Overview

Block templates are reusable UI components that allow you to add custom elements to [workflows](/workflows). Each block template requires a corresponding component in your application.

## Step 1: Create a UI component

Block templates rely on your custom UI components. First, create or reuse a component within your application. This component will be rendered when [users](/users) enter the block in a workflow.

### Create a component

In this guide, we’ll build a marketing banner with the following customizable properties:

- Title
- Description
- Button label and link
- Option to hide a close button

If you would like to add different properties to your component, you can use the following types:

- `string`
- `number`
- `boolean`
- select (dropdown) - `"foo" | "bar" | "baz"`

```tsx filename="banner.tsx"
type Props = {
  title: string;
  description: string;
  buttonLabel: string;
  buttonLink: string;
  hideCloseButton?: boolean;
};

export const Banner = (props: Props): ReactNode => {
  return (
    <div>
      <div>
        <h2>{props.title}</h2>
        {!props.hideCloseButton && <button>X</button>}
      </div>
      <div>
        <p>{props.description}</p>
        <a href={props.buttonLink}>{props.buttonLabel}</a>
      </div>
    </div>
  );
};
```

### Add exit node props

Now we will add exit node props that will allow Flows to react to user interactions with the block. Let's add `complete` and `close` props that will be called when the user clicks the button or the close button.

```tsx {7-8, 16, 20} filename="banner.tsx"
type Props = {
  title: string;
  description: string;
  buttonLabel: string;
  buttonLink: string;
  hideCloseButton?: boolean;
  complete?: () => void;
  close?: () => void;
};

export const Banner = (props: Props): ReactNode => {
  return (
    <div>
      <div>
        <h2>{props.title}</h2>
        {!props.hideCloseButton && <button onClick={props.close}>X</button>}
      </div>
      <div>
        <p>{props.description}</p>
        <a onClick={props.complete} href={props.buttonLink}>
          {props.buttonLabel}
        </a>
      </div>
    </div>
  );
};
```

<BetterCallout variant="warning">
  Use only `complete` and `close` props for tour components, as they integrate directly with the
  Flows runtime.
</BetterCallout>

With added styling, the component should look like this:

<Banner
  title="Acme Conf 2024"
  description="Less than one week left to get free virtual tickets to Acme Conf, our global event."
  buttonLabel="Register"
  buttonLink="#"
/>

### Add component into the init function

To make the component available to Flows, you need to add it to the `init` function in your application.

```js {6}
import { init } from "@flows/flows";
import { Banner } from "./banner";

init({
  components: {
    Banner,
  },
});
```

## Step 2: Create a block template

Now that we have our component, we can create a block template in Flows. Navigate to **Block templates** and click **Create new template**.

A dialog will appear where you need to enter a name for the block template and select if the component is going to be used in a workflow or a tour.

### Specify component

To tell the Flows SDK which component to use, you need to enter the name of the component you defined in your application. In our case, it's `Banner`.

### Select if the component is slottable

If your component is intended to be rendered inside the application, you need to select the **Slottable** option. This will allow you to specify a slot id when adding the block to a workflow. In our case, the banner component is slottable.

### Define block properties

Block properties are the fields that your editors can customize when they add the block to a workflow. They are the same as the props you defined in your component. For our banner component, we'll add the following properties:

| Name              | Key             | Type    |
| ----------------- | --------------- | ------- |
| Title             | title           | string  |
| Description       | description     | string  |
| Button label      | buttonLabel     | string  |
| Button link       | buttonLink      | string  |
| Hide close button | hideCloseButton | boolean |

Each property has:

- **Title** - the name of the property
- **Description** - a short description of the property for the editor (e.g. instructions)
- **Key** - the key that will be used to pass the value to the component
- **Type** - the type of the property

### Add exit nodes

Exit nodes are the transitions that can be triggered when the user interacts with the block. For our banner component, we'll add two exit nodes:

- **`complete`** - when the user clicks the button
- **`close`** - when the user clicks the close button

The exit node has only a `key` field that needs to match the prop name in your component.

### Additional customization

You can also change the icon of your block template by clicking on the icon above the block template name.

### Save and publish

Once you've defined your properties and exit nodes, click **Publish changes** to make the latest version of the block template available to use in your [workflows](/workflows).

## Step 3: Add block to workflow

Now that we have our block template, we can add it to a workflow. Navigate to a workflow and click **Add block**. Select the block template you created and configure the properties.

## Step 4: Finish the workflow

Once you've added the block to the workflow, you can connect it to other [blocks](/blocks/library) and paths to create a complete workflow. Users will see your custom component when they reach the block in the workflow.



===
File: blocks/library.mdx

---
title: Block library
description: Understand the building blocks that power your workflows.
---


# Block library

Understand the building blocks that power your [workflows](/workflows).

[TODO: Image]

## Overview

Blocks are the individual steps connected by paths to create [workflows](/workflows). They can represent UI elements, logical steps, or actions. Each block has configurable properties, allowing for custom behavior. You can also create reusable custom [block templates](/blocks/templates) create custom UI components for [workflows](/workflows).

## Start blocks

Start blocks define the entry points for [users](/users) to begin a workflow. Multiple start blocks can be used in a single workflow to allow different entry conditions. Once a user enters a workflow, they will not re-enter until they exit it.

### Automatic start

Automatically triggers a workflow when specific conditions are met.

**Input:**

- **User properties conditions**: An array of conditions based on [user properties](/users/properties) that must be satisfied for a user to enter the workflow.

## Component blocks

Component blocks display custom UI elements within your application. They come in two types:

- **Floating**: UI components displayed over the application, such as modals and tooltips.
- **Inline**: UI components integrated within the application layout, such as banners and cards, added via slots.

To use component blocks, create a block template and integrate the corresponding component into your application. Default component blocks are available to help you get started.

## Logic blocks

Logic blocks manage workflow behavior. They can be used to define branching logic, conditions, and other rules.

### Filter

Filters [users](/users) based on specific conditions, allowing only those who match the criteria to proceed. Users who don't match stop at the block but may continue along other workflow paths if available.

**Input:**

- **User properties conditions**: An array of conditions [users](/users) must meet to pass through the block.

## End block

End blocks exit the workflow. When a user reaches an end block, the workflow is completed and marked as finished.



===
File: blocks/templates.mdx

---
title: Block templates
description: Create custom UI components for workflows with block templates
---
# Block templates

Create custom UI components for [workflows](/workflows) with block templates.

![Block template preview](TODO: Add image link)

## Overview

Block templates are reusable UI components that allow you to create custom elements for [workflows](/workflows). They contain properties and instructions, giving editors the power to create custom workflows. Each template must correspond to a matching component in your application.

## Creating a block template

To create a block template:

1. Navigate to **Block templates** in your application.
2. Click **Create new template**.
3. Define the template’s properties and configure its exit nodes.

For more detailed guidance, refer to our [guide on creating block templates](/blocks/create-custom-components).

## Using block templates

Once a block template is created, you can use it in your workflows:

1. Add a new block in a workflow.
2. Select the desired block template.
3. Configure its properties and connect it to other [blocks](/blocks/library) within the workflow.

## Updating block template instances

Block template updates are not automatically applied to their instances in workflows. To apply updates:

1. Navigate to the template instance in a specific workflow.
2. Click **Update** to synchronize the changes.

This approach prevents unintended disruptions in live workflows.



===
File: contact-us.mdx

---
title: Contact us
description: Have a question? We're here to help.
---

# How can we help?

Get in touch with our team for demos, product questions, reporting issues, or leaving feedback.

## Email

For any questions or feedback, please email us at hello@flows.sh

## Slack community

[Join our Slack community](https://flows.sh/join-slack) to chat with other Flows users and the Flows team.



===
File: getting-started/concepts.mdx

---
title: Concepts
description: Get a basic understanding of Flows so you can set up your organization and start using Flows effectively.
---

# Concepts

Get a basic understanding of Flows so you can set up your organization and start using Flows effectively.

[TODO: Image]

## Basic concepts

### Organization

An organization is the container for all [workflows](/workflows), [environments](/organization-setup/environments), [users](/users), and members. As a user, you can belong to multiple [organizations](/organization-setup/organizations) and switch between them using the dropdown in the top-right corner of the application. Logging into Flows means accessing your personal account, which can be associated with multiple organizations.

## Workflows

A workflow is a series of steps executed in a specific sequence, defined by the connections between [blocks](/blocks/library) and their conditions. These [workflows](/workflows) are built using the Flows editor, which offers a visual representation for creating and managing [workflows](/workflows). In the editor, you can add blocks, connect them, and configure their properties.

Workflows are version-controlled and can be published to individual [environments](/organization-setup/environments).

### Blocks

Blocks are the individual steps of a workflow. They can represent UI elements, logical steps, or actions. Each block has customizable properties that define its behavior and can be connected to other [blocks](/blocks/library) to form a workflow.

### Block properties

Block properties are the configurable fields available to editors when a block is added to a workflow. They map directly to the props defined in your components. For instance, a "banner block" might include properties like `title`, `description`, `button label`, `button link`, and `hide close button`.

### Block templates

Block templates are reusable UI components that allow you to create custom elements for [workflows](/workflows). They contain properties and instructions, giving editors the power to create custom workflows. Each template must correspond to a matching component in your application.

### Entry node

Entry nodes are connectors that allow [workflows](/workflows) to enter a block. They don't hold logic; they serve as the entry point for paths.

### Exit nodes

Exit nodes are connectors that allow [workflows](/workflows) to leave a block. They include logic to determine which path should be followed when exiting. For example, clicking a button might trigger an exit node that leads to another block.

### Paths

Paths connect [blocks](/blocks/library) in a workflow, starting from an exit node of one block and ending at an entry node of another. They define the sequence of the workflow.

## Tours

Tours are guided, step-by-step instructions designed to help [users](/users) complete a specific task or understand a feature within your application. They are typically used for onboarding new [users](/users) or highlighting new functionalities. Tours need to be part of a workflow.

### Tours vs [workflows](/workflows)

While both tours and [workflows](/workflows) consist of a series of steps, they differ in purpose and design:

- **Tours** are linear, time-sensitive guides focused on immediate user engagement and understanding. They are perfect for introducing features or ensuring [users](/users) can perform specific actions during onboarding.
- **Workflows** are more complex and versatile, designed to support complex sequences. Workflows can operate independently of user interaction and include logic, actions, and conditions that tours do not.



===
File: getting-started/migrate-to-flows.mdx

---
title: Migrate to Flows
description: Transition from your current solution to Flows with our help.
---

# Migrate to Flows

We understand that transitioning from your current solution to Flows can be a daunting task. We're here to help you every step of the way.

## Assisted migration

For a seamless transition, we will help you to migrate your existing onboarding solution to Flows. Our team will work with you to understand your current setup and guide you through the migration process. We will help you to:

- Set up your Flows account
- Recreate your existing onboarding in Flows
- Style onboarding elements to match your brand
- Test the onboarding experience
- Train your team on how to use Flows

This service is available to all customers who are looking to switch to Flows free of charge. To request an assisted migration, [contact us](/contact-us).

## Transition period

We understand that transitioning to a new tool can take time. To make the process easier, we offer a transition period where you can use Flows alongside your current solution. This will give you time to set up Flows, recreate your onboarding experiences, and test them before fully switching over.

To avoid double [billing](/organization-setup/billing), any usage during the transition period (or until the end of your contract with your current provider) will be **free of charge**. To set up the transition period, [contact us](/contact-us).



===
File: index.mdx

---
title: Flows docs
description: Welcome to Flows documentation! We're here to answer your questions.
---

import { Cards, Card } from "nextra/components";
import { links } from "shared";

# Flows documentation

Get an overview of Flows features and how to use them. We're here to answer your questions.

<BetterCallout variant="info">
  Can't find what you're looking for? [Contact us](/contact-us) and we'll help you out.
</BetterCallout>




===
File: organization-setup/allowed-domains.mdx

---
title: Allowed domains
description: Select the domains where the Flows SDK can be used.
---

# Allowed domains

Select the domains where the Flows SDK can be used. This is a security feature that allows you to restrict where the Flows SDK can be used.

![Organization domains](/organization-setup/domains.png)

## Add a domain

To add a domain, just click on the **Add domain** button and enter the domain name. Make sure to enter the domain with the correct protocol (`http://` or `https://`) and without the trailing slash. We don't support wildcards.

### Null origin

Some environments don't have a domain, for example Figma plugins. You can allow null origins by adding `null` to the list of allowed domains.

## Local development

When you are developing locally, you don't need to add `localhost` and `127.0.0.1` to the list of allowed domains. The Flows SDK will work on your machine without any additional configuration.



===
File: organization-setup/billing.mdx

---
title: Billing
description: We offer a free plan and pay-as-you-go plan to suit your needs.
---

import { Tabs } from "nextra/components";

# Billing

We offer a free plan and pay-as-you-go plan to suit your needs.

[TODO: image]

## How our plans and billing works

### Plans

Flows offers a **Forever Free** plan with generous usage limits, ideal for startups and small teams. When you're ready to scale, our **Pay-As-You-Go** plan ensures flexibility with costs based on actual usage. For the most up-to-date information, visit our [pricing page](https://flows.sh/pricing).

### Billing

Billing is calculated based on Monthly Active Users (MAUs) identified across all [environments](/organization-setup/environments) in your organization. You are billed monthly, and subscriptions can be canceled anytime.

**Pay-As-You-Go:** Costs are based on the total MAUs during the billing period. A monthly cycle begins on your subscription date and renews on the same day each month. For example, if you subscribe on the 15th, your next cycle will start on the 15th of the following month.

**Free Plan:** Usage limits reset at the start of every month. If you reach the limit, you cannot identify new [users](/users) until the next cycle, but existing users continue to access [workflows](/workflows) without interruption.

## Manage your billing

To manage your subscription, navigate to **Settings > Billing**, where you can:

- Upgrade or downgrade your plan
- Update payment or billing contact information
- Review billing history, invoices, and payments

### Upgrade to a paid plan

Navigate to **Settings > Billing** and select **Upgrade**. Your new plan takes effect immediately, starting a new billing cycle from the day you upgrade.

### Cancel a Subscription

To cancel a subscription, navigate to **Settings > Billing**. Your subscription will be canceled immediately, and your usage limit will revert to the Free tier. The last invoice will be generated at the end of the billing cycle.

### Set a usage Limit

The **Pay-As-You-Go** plan includes the option to set usage limits to avoid surprises. Configure these limits in the **Usage Limit** section of **Settings > Billing**.

- Notifications are sent when you reach 80% and 100% of your limit.
- Once the limit is reached, no new [users](/users) can be identified until the next billing cycle. The existing users can continue to access [workflows](/workflows) without interruption.

### Add a VAT number

To add a VAT number during checkout, choose the **Add tax ID number** option.

To add a VAT number for an existing subscription, navigate to **Settings > Billing** and click the **Manage subscription** button. You will be redirected to your Customer portal in Lemon Squeezy where you can add your VAT number.

### Update payment information or billing contact

To update your payment information or billing contact, navigate to **Settings > Billing** and click the **Manage subscription** button. You will be redirected to your Customer portal in Lemon Squeezy where you can update your payment information or billing contact.

## Special Pricing Programs

Are you a startup, non-profit, or educational institution? Contact us at [hello@flows.sh](mailto:hello@flows.sh) for details about special pricing.



===
File: organization-setup/environments.mdx

---
title: Environments
description: Separate Flows deployments for different stages of your development lifecycle.
---

# Environments

Separate Flows deployments for different stages of your development lifecycle.

[TODO: image]

## Overview

Environments allow you to manage [workflows](/workflows) across the entire development lifecycle, from local development to production. Each environment operates independently with its own:

- Active workflow versions and statuses
- Workflow analytics
- Users

You can create an unlimited number of environments.

## Create an Environment

[TODO: image of the environment page]

To create a new environment:

1. Navigate to **Settings > Environment**.
2. Enter a **unique key** for the environment. This key is used to identify the environment in the SDK.

## Edit an Environment

To modify an existing environment:

1. Navigate to **Settings > Environment**.
2. Update the **environment key** as needed.

<BetterCallout variant="warning">
  **Important:** If you update the environment key, ensure the key is updated in your SDK's `init`
  function to prevent service disruptions.
</BetterCallout>

## Using Environments

Each environment is associated with a unique key that links your application to the correct [workflows](/workflows). Include this key in your SDK setup:

```javascript
import { init } from "@flows/flows-sdk";

init({
  environment: "your-environment-key",
});
```



===
File: organization-setup/manage-members.mdx

---
title: Manage members
description: Invite and manage members of your organization.
---

# Manage members

Invite and manage members of your organization.

![Organization switcher](/organization-setup/members.png)

## Overview

You can manually invite and remove members from the organization settings page. Currently, everyone has the same permissions, but we will introduce roles in the future.

## Invite members

To send an invitation:

1. Navigate to **Settings > Organization > Members**.
2. Click **Invite Member**.
3. Enter the email address of the invitee.
4. Click **Send invite**.

The recipient will receive an email with an invitation link valid for 7 days. After joining, they’ll gain full access to the organization and its [workflows](/workflows).

## Remove members

To revoke a member's access:

1. Navigate to **Settings > Organization > Members**.
2. Click **Remove** next to the member’s name.

Please note that until we implement member roles, any member of the organization can remove others.

## Join an organization

The only way to join an organization is via invitation. When you receive an invitation to join an organization, click the link in the email to join the organization or log in to Flows and accept the invitation.

## Leave an organization

If you need to leave an organization:

1. Navigate to **Settings > Account > Organizations**.
2. Click **Leave Organization** next to the organization you want to leave.

You cannot leave if you’re the last member of the organization.



===
File: organization-setup/organizations.mdx

---
title: Organizations
description: The first step to using Flows is to create an organization for your company.
---

# Organizations

The first step to using Flows is to create an organization for your company.

![Organization switcher](/organization-setup/organizations.png)

## Overview

An organization is the home for all your [workflows](/workflows) and interactions in Flows. We recommend creating a single organization for your company and using [environments](/organization-setup/environments) to manage different deployments effectively.

When you create an organization, Flows automatically generates a default environment and language setting for you.

## Organization settings

To manage your organization, go to **Settings > Organization**.

Currently, any member of the organization can perform administrative tasks, such as:

- Adding or removing members
- Renaming the organization
- Deleting the organization
- Managing [billing](/organization-setup/billing) and [workflows](/workflows)

<BetterCallout variant="info">
  **Note**: This approach will evolve as we introduce **member roles**, offering more granular
  permissions.
</BetterCallout>

### Delete an organization

Deleting an organization is permanent and includes the removal of all workflows and user data. You can delete an organization under **Settings > Organization > General**.

<BetterCallout variant="warning">
  **Important:** Before deleting an organization, cancel your subscription if you have a paid plan.
</BetterCallout>

## Multiple organizations

Flows allows you to create multiple [organizations](/organization-setup/organizations) under a single account (e.g. tied to a specific email). If you are using Flows for multiple projects, we recommend creating a separate organization for each project.



===
File: users/index.mdx

---
title: Users
description: Inspect user activity and manage their workflow states.
---

# Users

Inspect user activity and manage their workflow states.

[TODO: image]

## Overview

Users are individuals who you identify inside Flows. Each user has a unique identifier and can experience [workflows](/workflows) inside your app. Users are scoped on environment level, meaning that a user with the same ID will have individual user profile and workflow states in each environment.

The **User detail** page allows you to:

- [View user properties](/users/properties)
- [View event log](/users/log)
- [Inspect and manage user workflow states](/users/workflow-states)
- [Reset user progress](/users/workflow-states#reset-user-progress)

## Add a user

Users are automatically added to Flows when they are initialized in your application. When you identify a user, Flows creates a user profile based on the provided user ID. You can't add users manually.

## Remove a user

Currently users can't be removed from Flows. If you need to remove a user, contact us at [hello@flows.sh](mailto:hello@flows.sh).



===
File: users/log.mdx

---
title: Event log
description: Track and view user activity in your environments
---

# Event log

Track and view user activity in your environments

[TODO: image]

## Overview

Flows automatically track user events across your [environments](/organization-setup/environments), maintaining a detailed history of interactions. This includes workflow state changes and block transitions, helping you inspect and debug user behavior.

## Understanding the user log

Each event in the user log includes the following details:

- **Timestamp** - the exact date and time the event occurred
- **Event Type** - categorizes the event (e.g., block transition, workflow completion)
- **Event name** - identifies the workflow and block associated with the event

Event types include:

- **`workflow-entered`** - the user entered a workflow
- **`workflow-exited`** - the user completed or exited a workflow
- **`block-entered`** - the user entered a block
- **`block-exited`** - the user exited a block

## Example Use Case

Imagine a user reports an issue while navigating a workflow. By reviewing the **User Log**, you can:

1. Follow the user's path to identify where they encountered the issue.
2. Verify if the user completed expected transitions or encountered an error.
3. Use this data to optimize [workflows](/workflows) or address potential bottlenecks.



===
File: users/properties.mdx

---
title: User properties
description: How to add and manage user properties
---

# User properties

How to add and manage user properties

[TODO: image]

## Overview

User properties enable you to store additional information about your [users](/users) as key-value pairs. These properties can be used to segment users.

## Default user properties

Flows automatically collects the following default user properties:

- **`updatedAt`** - timestamp when the user was last updated in Flows
- **`createdAt`** - timestamp when the user was created in Flows
- **`id`** - unique identifier of the user provided by you
- **`environment`** - environment (e.g., staging, production) associated with the user

## Custom user properties

Custom user properties are additional fields that you can use to store information about your users. You can define these properties using the Flows SDK or API.

### Property types

Custom user properties can be of the following types:

- **`string`**
- **`number`**
- **`boolean`**
- **`date`** - a date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format

## Adding custom user properties

To add custom user properties, use the Flows SDK as shown below:

```javascript
import { init } from "@flows/flows-sdk";

init({
  environment: "your-environment-key",
  userProperties: {
    customProperty: "value", // Add your custom property here.
  },
});
```

## Reserved property names

The following property names are reserved by Flows and cannot be used for custom user properties:

- **`updatedAt`**
- **`createdAt`**
- **`id`**
- **`environment`**

## View assigned user properties

To view a user's properties:

1. Navigate to the **Users** page in Flows.
2. Search for the user by their unique ID.
3. View custom properties in the user detail page.



===
File: users/workflow-states.mdx

---
title: Workflow states
description: Inspect and manage user workflow states
---

# User workflow states

Inspect and manage user workflow states

[TODO: image]

## Overview

Every user you identify in Flows has a state for each workflow in your organization. You can inspect and update these states from the user detail page to troubleshoot or test [workflows](/workflows) effectively.

## Understanding user workflow states

Each workflow state includes the following details:

- **Workflow** - the name of the workflow
- **Workflow status** - indicates if the workflow is active or its configuration is preventing the user from entering
- **User progress** - tracks the user’s progress within the workflow

### Workflow status

Workflow status can be one of the following:

- **Disabled** - workflow is disabled in the user's environment
- **Enabled** - workflow is enabled in the user's environment
- **No version assigned** - the workflow is enabled but lacks an assigned version in the user's environment

### User progress

User progress can be one of the following:

- **Not started** - user has not entered the workflow yet
- **In progress** - user is currently in the workflow
- **Finished** - user has completed or exited the workflow

## Reset user progress

Flows makes it easy to reset a user’s progress in a workflow. This can be particularly useful for testing updates or resolving user-specific issues.

To reset a user's progress in a workflow:

1. Navigate to the **Users** page in Flows.
2. Search for the user by their unique ID.
3. Open the **Workflows** tab in the user detail page.
4. Click **Reset progress** next to the workflow you want to reset.



===
File: workflows/adding-blocks.mdx

---
title: Adding blocks
description: Learn how to add blocks to your workflow, the first step in building workflows.
---

# Adding blocks

Learn how to add blocks to your workflow, the first step in building workflows.

[TODO: Insert illustrative image of adding a block]

## Overview

Blocks represent individual steps in a workflow, such as UI components, logic, or actions. Each block has configurable properties that determine its behavior. By connecting [blocks](/blocks/library) through paths, you create a workflow.

## Add a block

To add a block to your workflow:

1. Click the **Add block** button located in the workflow toolbar at the bottom center of your screen.
2. Select a block from your block library.
3. Drag and drop the block to its intended position in the workflow editor.
4. Configure the block's properties in the settings panel on the right-hand side of the screen.

## Next steps

After adding [blocks](/blocks/library), you need to configure their properties and exit nodes. To learn more, see [Configuring blocks](./configuring-blocks.mdx).



===
File: workflows/configuring-blocks.mdx

---
title: Configuring blocks
description: Customize block properties and their behavior.
---

# Configuring blocks

Customize block properties and their behavior.

[TODO: Add illustrative image]

## Overview

Blocks are individual steps of [workflows](/workflows), with configurable **properties** and **exit nodes**. Properties control the block's behavior and appearance, while exit nodes define the paths [users](/users) take after interacting with the block.

## Block name and description

Every block includes a name and description. The name is displayed in the workflow, while the description can be used to provide additional context about the block.

## Block properties

Block properties define a block's behavior and appearance. Access these properties in the block edit panel. Hover over a property name to view additional details, such as description, key, and type.

### Basic property types

Basic property types include:

- **String**: Input for string values.
- **Number**: Input for numeric values.
- **Boolean**: Checkbox for true/false values.
- **Select**: Dropdown menu to choose from predefined options.

### Slot configuration

If a block is slottable (i.e., designed to render within your application), additional slot-specific properties are available:

- **Slot ID**: Specifies the slot where the block will be rendered, as defined in your application.
- **Slot index**: Controls the rendering order when multiple [blocks](/blocks/library) share the same slot. Blocks with lower index render first.

### Page targeting

Use page targeting to determine where the block appears based on the URL. Supported options include:

- **Contains**: The block appears if the URL contains the specified value.
- **Does not contain**: The block appears if the URL excludes the specified value.
- **Matches regex**: The block appears if the URL matches the specified regular expression.

### Tour steps

For tour blocks, the **steps** property defines individual steps. Each step behaves like an individual block but transitions automatically when completed. You can:

- Add steps from your tour blocks library.
- Use built-in logic [blocks](/blocks/library), such as **`wait`** steps.

Built-in logic [blocks](/blocks/library) include:

- **`wait`**: Pause the tour until a user interacts with your application (e.g., clicking a button or navigating to a specific page).

#### Wait steps

Similarly to a **`wait`** step in a tour block, the **`wait`** property pauses the tour at a specific step until the user interacts with your application, such as clicking a button or navigating to a page. This property is exclusive to tour blocks.

## Exit nodes

Exit nodes are transitions triggered by user interactions with a block. To configure:

1. Click the **`+`** button beside the node key.
2. Select the destination block(s) to connect.

Users can transition to multiple blocks. If no exit nodes are connected, the workflow halts at the current block.

Each exit node can transition to multiple blocks. If no blocks are connected, the user instance stops at the current block. However, the workflows may continue if user is currently in other blocks.

## Block positioning

You can drag and drop blocks within the workflow editor to adjust their visual layout. Note that position changes do not affect block functionality.

## Removing a block

To remove a block:

1. Click the **`•••`** menu in the block's edit panel.
2. Select **Delete block**.

This removes the block and disconnects all associated paths.



===
File: workflows/index.mdx

---
title: Workflows
description: Learn how to create and manage workflows in Flows.
---

# Workflows

Learn how to create and manage workflows in Flows.



===
File: workflows/publishing.mdx

---
title: Publishing workflows
description: Learn how to publish workflows in Flows
---

# Publishing workflows

Learn how to publish workflows in Flows.

[TODO: image]

## Overview

Workflows are version-controlled, allowing each environment to maintain a different active version. Publishing a workflow creates a new version, which can then be activated in specific [environments](/organization-setup/environments).

## Publishing a workflow

To publish a workflow:

1. Click the **Publish** button in the top-right corner of the workflow editor.
2. Configure the following settings in the dialog that appears:

### Frequency

Define how often [users](/users) can enter the workflow:

- **Once**: Users enter the workflow only once.
- **Every time**: Users enter the workflow every time they meet the start conditions, provided they are not currently in the workflow.

### How to migrate active users

Determine what happens to users currently active in the workflow when a new version is activated:

- **End in-progress users**: Stops users who are currently active.
- **Restart in-progress users**: Restarts active users from the beginning.

These settings apply whenever the version is activated in an environment.

### Apply to environments

Choose which [environments](/organization-setup/environments) the new version should be applied to. If you're not ready to activate it in any environment, this can be done later from **Workflows detail > Environments**.

## Managing active versions

To manage active versions in environments:

1. Navigate to **Workflows detail > Environments**.
2. View the versions active in each environment, and manage environments as needed.

Each environment includes:

- **Workflow version**: The active version in that environment.
- **Status**: Indicates if the workflow is active.

To disable a workflow in an environment, toggle the **Status** checkbox.



===
File: workflows/testing.mdx

---
title: Testing workflows
description: Learn how to test workflows in Flows.
---

# Testing workflows

Learn how to test workflows in Flows.

[TODO: image]

## Overview

Testing [workflows](/workflows) is an essential step in ensuring your workflows run smoothly. Flows provides tools to validate and debug workflows before they are deployed.

## How to test a workflow

Follow these steps to test your workflow:

1. **Publish to test environment**: Publish the workflow in a test environment by clicking the **Publish** button in the workflow editor's top-right corner.
2. **Log in to your application**: Access your application in the test environment.
3. **Trigger the workflow**: Trigger the workflow by meeting the start block conditions. This may involve creating a new user, updating a user property, or performing another action that triggers the workflow.
4. **Verify behavior**: Confirm that the workflow executes as expected.

<BetterCallout>
  To simplify testing, set the workflow frequency to `Every time`. This allows you to test
  repeatedly without needing additional changes.
</BetterCallout>

## Restarting a workflow

If necessary, you can restart a workflow during testing. There are two methods to achieve this:

### 1. Publish a new version

When you publish a new version of a workflow, choose the **Restart all in-progress users** option. This resets the workflow for all [users](/users) currently in progress.

### 2. Restart a single user

To restart for a specific user without publishing a new version:

- Navigate to the user's profile.
- Click the **Reset progress** button next to the relevant workflow. Learn more about [user workflow states](/users/workflow-states).

## Debugging workflows

For insights into workflow execution for individual users, view their **Workflow state** and **Log** in the [user profile](/users).

